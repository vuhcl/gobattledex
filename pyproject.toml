[tool.bumpver]
commit = true
commit_message = ":bookmark: bump version {old_version} -> {new_version}"
current_version = "2024.3.8"
push = false  # set to false for CI
tag = false
version_pattern = "YYYY.MM.INC1"

[tool.bumpver.file_patterns]
"gbd/__init__.py" = [
  '__version__ = "{version}"'
]
"tests/test_version.py" = [
  'assert __version__ == "{version}"'
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if DEBUG:",
  "if not DEBUG:",
  "if settings.DEBUG:",
  "if TYPE_CHECKING:",
  'def __str__\(self\)\s?\-?\>?\s?\w*\:'
]

[tool.coverage.run]
omit = [
  "*/node_modules/*",
  "gbd/*/migrations/*",
  "gbd/asgi.py",
  "gbd/wsgi.py",
  "templates/*",
  "tests/*",
  "manage.py",
  "requirements.txt"
]
plugins = ["django_coverage_plugin"]
source = ["gbd"]

[tool.django-stubs]
django_settings_module = "config.settings.local"

[tool.djlint]
ignore = "H031"  # Don't require `meta` tag keywords
indent = 2

[tool.mypy]
check_untyped_defs = true
files = [
  "gbd"
]
no_implicit_optional = true
plugins = [
  "mypy_django_plugin.main"
]
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
ignore_errors = true
module = [
  "gbd.*.migrations.*",
  "tests.*"
]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "allauth.*",
  "boto3.*",
  "botocore.*",
  "debug_toolbar.*",
  "django_filters.*",
  "django_q.*",
  "djclick.*",
  "gunicorn.*",
  "health_check.*"
]

[tool.mypy_django_plugin]
ignore_missing_model_attributes = true

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings.test"
addopts = "--reuse-db -n auto --dist loadfile"
norecursedirs = ".* bin build dist *.egg htmlcov logs node_modules static templates venv"
python_files = "tests.py test_*.py *_tests.py"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".github",
  ".hg",
  ".mypy_cache",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "build",
  "dist",
  "migrations",
  "node_modules",
  "venv"
]
extend-include = ["*.pyi?"]
indent-width = 4
# Same as Black.
line-length = 88
# Assume Python 3.12
target-version = "py312"

[tool.ruff.format]
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Like Black, use double quotes for strings.
quote-style = "double"

[tool.ruff.lint]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "I"]
ignore = ["E501", "E741"]  # temporary
select = [
  "B",  # flake8-bugbear
  "E",  # Pycodestyle
  "F",  # Pyflakes
  "I",  # isort
  "UP"  # pyupgrade
]
unfixable = []

[tool.ruff.lint.isort]
force-single-line = true
known-first-party = ["gbd"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
[tool.poetry]
name = "pvpogo-tools"
version = "0.1.0"
description = "Team building utilities for Pok√©mon Go PvP battles and Go Battle League"
authors = ["Vu H. Chu-Le <vu@uni.minerva.edu>"]
license = "Apache 2.0"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
python-slugify = "^8.0.4"
pillow = "^10.2.0"
rcssmin = "^1.1.1"
argon2-cffi = "^23.1.0"
whitenoise = "^6.6.0"
gunicorn = "^21.2.0"
redis = "^5.0.3"
hiredis = "^2.3.2"
uvicorn = {extras = ["standard"], version = "^0.28.0"}
orjson = "^3.9.15"
sentry-sdk = "^1.40.5"
Django = "^5.0.3"
django-environ = "^0.11.2"
django-model-utils = "^4.4.0"
django-allauth = "^0.61.1"
django-crispy-forms = "^2.1"
crispy-bootstrap5 = "^2024.2"
django-compressor = "^4.4"
django-redis = "^5.4.0"
django-cors-headers = "^4.3.1"
django-htmx = "^1.17.3"
django-sri = "^0.7.0"
django-ninja = "^1.1.0"
django-reversion = "^5.0.12"
django-dramatiq = "^0.11.6"
djlint = "^1.34.1"
heroicons = "^2.6.0"
django-simple-nav = "^0.5.1"
django-template-partials="^23.4"
# healthcheck = "^1.3.3"
# django-q2 = "^1.6.2"
psycopg = {extras = ["binary"], version = "^3.1.18"}

[tool.poetry.group.test]
optional=true

[tool.poetry.group.test.dependencies]
flake8-pytest-style = "^1.7"

pytest = "^8.1.1"
pytest-sugar = "^1.0.0"

docker-image-size-limit = "^1.1"
tomli = "^2.0"
pytest-django = "^4.8.0"

[tool.poetry.group.dev.dependencies]
Werkzeug = {extras = ["watchdog"], version = "^3.0.1"}
ipdb = "^0.13.13"
watchfiles = "^0.21.0"
mypy = "^1.7.0"
django-stubs = { version = "^4.2.7", extras = ["compatible-mypy"] }

ruff = "^0.3.2"
coverage = "^7.4.4"
pre-commit = "^3.6.2"
django-debug-toolbar = "^4.3.0"
django-extensions = "^3.2.3"
django-coverage-plugin = "^3.1.0"
django-browser-reload = "^1.12.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
Sphinx = "^7.2.0"
sphinx-autobuild = "^2024.2.4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
